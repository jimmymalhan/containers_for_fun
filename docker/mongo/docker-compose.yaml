# Docker Compose

# - it is easier to manage multiple docker containers and don't have to use 'docker run' command on each container.
# - docker compose will create the common network and will manage the containers in the same network unlike docker run.

###################################################

# Below Configurations are similar to readme.md in the mongo & mongo-express folder.

# mongo-docker-compose.yaml
version: '3'
services:
  # my-app:
  # image: ${docker-registry}/my-app:1.0
  # ports:
  # - 3000:3000
  mongodb: # custom container name
    image: mongo # image name
    ports:
      - 27017:27017 # host port: container port
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db # default path for mongodb and it varies by other databases

# mongo-express-docker-compose.yaml 
  mongo-express:
    image: mongo-express
    restart: always # fixes MongoNetworkError when mongodb is not ready when mongo-express starts
    ports:
      - 8080:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
volumes:
  mongo-data:
    driver: local

# Start the containers
# - docker-compose -f docker-compose.yaml up
# - docker network ls # automatocally will create the network
# - docker ps
# - docker logs mongo -f # follow the logs

# how to check why container exited
# - docker inspect mongo-express

docker exec -it 

# Volume
# Using volume data won't be lost when it's restarted
# docker ps
# docker exec -it <container_id> sh
# ls /data/db

# or 

# Volume information is stored on mac 
# `screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty`
# /var/lib/docker/volumes


# docker-compose -f mongo.yaml down

# docker rm -f $(docker ps -a -q) # remove all containers
# docker rmi $(docker images -q) # remove all images